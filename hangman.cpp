#include <iostream> // Input Output Stream 
#include <fstream> // File Handling 
#include <sstream> // string stream
#include <string> // It is used to perform various functionalities related to string manipulation
#include <vector> // dynamic contiguous array
#include <cmath> // common maths functions
#include <set> // adding set
#include <map> // collection of key-value pairs, sorted by keys, keys are unique
#include <algorithm> //  defines functions for a variety of purposes (e.g. searching, sorting, counting, manipulating)
#include <typeinfo> //contains some type's information, generated by the implementation.
using namespace std;
// Difficult Functions //
void printVector( vector<char> word ); 
void printSet( set<char> setOfChar );
void printSetOfStrings( set<string>& setOfString ); 
void printwordsOthers( vector<char> word, int noguess, bool displaywords,
		set<char> lettersUsed, set<string>& masterList );
template <typename containerType>
void printSet( containerType const& mySet )
{
  typename containerType::const_iterator itr;
  typename containerType::const_iterator end( mySet.end() );
  for ( itr = mySet.begin(); itr != end; ++itr ){
    cout << *itr << ", ";
  }
  cout << "\b\b " << endl;
} 
// Structure //
struct words {
	int freq;
	set<string> family;
};
// Simpler Functions //
typedef map< string, words>  wordFamilyMap;
void yesno( set<string>& boolYes, set<string>& boolNo );
int negativeno( string& ask);
bool choice( string& ask, set<string> boolYes, set<string> boolNo);
char alphainput( string ask);
bool charused( char nextCh, set<char> lettersUsed );

void read( ifstream& humais, set<string>& english);
void trim( size_t wordLen, set<string>& master, set<string>& english,
		string ask);

void formWordFamilies( char nextCh, set<string> masterList, wordFamilyMap& wordFamilies);
bool mapping(const pair<string, words >& lhs, 
		const pair<string, words >& rhs);

string wronguess( int wordLen );
int update( string wordCode, string badGuess, char nextCh, vector<char>& word);
// Main Function //

int main() {
	system("Color 0A");
  cout << "=====================\n";
  cout << "Hangman: The AI Game\n";
  cout <<"Made By Humais Aslam \n";
  cout <<"Minahil Rana \n";
  cout <<"Jaweriya Atif \n";
  cout << "=====================\n";
  cout << "Instructions: Save your friend from being hanged by guessing the letters in the codeword.\n";

	ifstream humais;
	humais.open("jiya.txt");

	if( !humais.is_open() ) {
		cout << "File Is Damaged" << endl;
		return 0;
	}
	set<string> english;
	read( humais, english);
	bool replay = 1;
	while( replay ) {
		set<string> boolYes, boolNo;
		yesno( boolYes, boolNo);
		string ask = "Enter the Number of Guesses Desired:  ";
		int noguess = negativeno( ask);

		if (!noguess) {
			ask = "No Guesses, No Game! Would You Like To Play Again (Y/N)? ";
			replay = choice( ask, boolYes, boolNo);

			if (replay)
				continue;
			else
				break;
		}
		ask = "Do you want to see the remaining words list (Y/N)?  ";
		system("CLS");
		bool displaywords = choice( ask, boolYes, boolNo);
		ask = "Enter the Word Length for the Hangman: ";
		size_t wordLen = negativeno( ask);
		cout << endl;
		string badGuess = wronguess( wordLen );
		set<string> masterList;
		trim( wordLen, masterList, english, ask);
		vector<char> word(wordLen, '-');
		set<char> lettersUsed;
		printVector( word);
		while( wordLen > 0 && noguess > 0 ) {
			ask = "Enter Your Next Guess: ";
			
			char nextCh = alphainput( ask);
			bool isBadCh = charused( nextCh, lettersUsed );
			if (isBadCh) {
				cout << "Letter Used Already, Try Again!" << endl;
				continue;
			} else
				lettersUsed.insert( nextCh );
			wordFamilyMap wordFamilies;
			formWordFamilies( nextCh, masterList, wordFamilies);
			pair<string, words> maxwords = *max_element( wordFamilies.begin(),
					wordFamilies.end(), mapping);
			masterList.clear();
			masterList = maxwords.second.family;
			string wordCode = maxwords.first;
			int lettersGuessed = update( wordCode, badGuess, nextCh,  word);
			if( lettersGuessed == 0 )
				noguess--;
			else
				wordLen -= lettersGuessed;
			// Print Word
			printwordsOthers( word, noguess, displaywords, lettersUsed, masterList );
		}
		if ( noguess == 0 ) {
	cout<<"  +---+ \n";
    cout<<"  |   | \n";
    cout<<"  O   | \n";
    cout<<" /|\\  | \n";
    cout<<" / \\  | \n";
    cout<<"      | \n";
    cout<<" ========= \n " << endl;
	cout<<"Poor Guy Got Hanged \n";
			cout << "The Word was: " << *masterList.begin() << "\n" << endl;
		} else
			cout << "Winner !!!! You Have Defeated The Computer \n" << endl;
		ask = "Wanna Play Again (Y/N)? ";
		replay = choice( ask, boolYes, boolNo);
		cout << endl;
	}

	return 0;
}
void printwordsOthers( vector<char> word, int noguess, bool displaywords,
		set<char> lettersUsed, set<string>& masterList )
{
	printVector( word);
	cout << "Wrong Guesses Left: " << noguess << endl;
	cout << "Letters Used: " ;
	printSet( lettersUsed );
	cout << endl;

	if ( displaywords ) {
		cout << "Master List Length: " << masterList.size() << endl;
		cout << "Words contained: ";
		printSetOfStrings( masterList);
		cout << endl;
	}
}
int update( string wordCode, string badGuess, char nextCh, vector<char>& word)
{
	if ( wordCode == badGuess )
		return 0;

	int count = 0;
	for (int i = 0; i < wordCode.length(); i++){
		if ( wordCode[i] == '1') {
			word[i] = nextCh;
			count++;
		}
	}
	return count;
}
void formWordFamilies( char nextCh, set<string> masterList, wordFamilyMap& wordFamilies)
{ 
	string tempWord;
	for (set<string>::iterator itr = masterList.begin(); itr != masterList.end(); ++itr) {
		tempWord = *itr;

		for (int i = 0; i < tempWord.length(); i++) {
			if (tempWord[i] == nextCh)
				tempWord[i] = '1';
			else tempWord[i] = '0';
		}

		if ( wordFamilies.find(tempWord) == wordFamilies.end() ) {
			words wordFamily;

			wordFamily.freq = 1;
			wordFamily.family.insert( *itr );
			wordFamilies.insert( pair<string, words> (tempWord, wordFamily) );
		} else {
			wordFamilies[tempWord].freq++;
			wordFamilies[tempWord].family.insert( *itr);
		}
	}
}
bool mapping(const pair<string, words >& lhs, 
		const pair<string, words >& rhs)
{
	return lhs.second.freq < rhs.second.freq;
}
void printSetOfStrings( set<string>& setOfString ) 
{
	for ( set<string>::iterator itr = setOfString.begin(); itr != setOfString.end(); ++itr ){
		cout << *itr << ", ";
	}
	cout << "\b\b " << endl;
}
void printSet( set<char> setOfChar )
{
	for ( set<char>::iterator itr = setOfChar.begin(); itr != setOfChar.end(); ++itr ){
		cout << *itr << ", ";
	}
	cout << "\b\b " << endl;
}
void printVector( vector<char> word) 
{
	for (size_t i = 0; i < word.size(); i++) {
		cout << word[i];
	}
	cout << '\n' << endl;
}

bool charused( char nextCh, set<char> lettersUsed )
{
	if ( lettersUsed.find(nextCh) == lettersUsed.end() ) return 0;
	else return 1;
}
void trim( size_t wordLen, set<string>& masterList, set<string>& english,
		string ask)
{
	while( masterList.empty() ) {
		for( set<string>::iterator itr = english.begin(); itr != english.end(); ++itr) {
			if ( (*itr).length() == wordLen ) { 
			masterList.insert(*itr);
			}
		}

		if( masterList.empty()) {
			cout << "No word that long in the Dictionary, Try Again!" << endl;
			wordLen = negativeno( ask);
		}
	}
	return;
}
string wronguess( int wordLen )
{
	string zeros;
	for (int i = 0; i < wordLen; i++ ) {
		zeros += '0';
	}
	return zeros;
}
void read( ifstream& humais, set<string>& english)
{
	string data;
	while( getline(humais, data))
		english.insert( data);
}
void yesno( set<string>& boolYes, set<string>& boolNo) 
{
	string tempList[] =  {"y", "yes", "yah", "ya", "yup", "yae"};
	int tempListSize = sizeof tempList / sizeof(string);
	boolYes.insert( tempList, tempList+ tempListSize);
	string tempList1[] = {"n", "no", "nah", "na", "nope", "nae"};
	tempListSize = sizeof tempList1 / sizeof(string);
	boolNo.insert( tempList1, tempList1+ tempListSize);
}

char alphainput( string ask) 
{
	string data;

	while( true){
		cout << ask;
		getline(cin, data);

		if (data[data.size() - 1] == '\r') data.resize(data.size() - 1);

		if (data.length()>1 || !isalpha(data[0])) {
			cout << "Not a Single Alphabet, Try Again!" << endl;
		} else {
			cout<< endl;
			return data[0];
		}
	}
}

bool choice( string& ask, set<string> boolYes, set<string> boolNo ) 
{
	string data;
	while (true) {
		cout << ask;
		getline( cin, data);
		if (data[data.size() - 1] == '\r') data.resize(data.size() - 1);
		for (string::iterator itr = data.begin(); itr != data.end(); ++itr)
			*itr = tolower(*itr);

		if (boolYes.find(data) != boolYes.end()) 
			return 1;
		else if ( boolNo.find(data) != boolNo.end() )
			return 0;
		cout << "Incorrect Yes/No Answer, Try Again!" << endl;
	}
}
int negativeno( string& ask) 
{
	string data; int number;
	while (true) {
		cout << ask;

		getline( cin, data);
		istringstream sender(data);
		sender >> number;

		if (sender.fail() || number< 0)
			cout << "Enter +ve Integer !" << endl;
		else
			return number;
	}
}


